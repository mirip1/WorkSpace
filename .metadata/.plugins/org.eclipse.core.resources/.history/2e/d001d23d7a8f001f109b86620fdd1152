package pcp.unidad1.relacion07_2;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

public class MaestroSumadorApp {

  private static final String RUTA = "C:\\Users\\mivel\\eclipse-workspace\\Actividad_1.07\\src";

  public static void main(String[] args) {

  private static final String RUTA = "C:\\Users\\mivel\\eclipse-workspace\\Actividad_1.07\\src";

  public static void main(String[] args) {
    if (args.length != 2) {
      System.err.println("Se deben introducir dos argumentos");
      return;
    }
    if (!isNumero(args[0]) || !isNumero(args[1])) {
      System.err.println("Los parametros introducidos deben ser de tipo entero");
      return;
    }

    int numero1 = Integer.parseInt(args[0]);
    int numero2 = Integer.parseInt(args[1]);

    try {
      int diferencia = Math.abs(numero1 - numero2);

      if (diferencia < 25) {
        ProcessBuilder pb = new ProcessBuilder("java", "-cp", RUTA, "pcp.unidad1.relacion07_2.SumadorProdess",
            String.valueOf(numero1), String.valueOf(numero2));
        Process process = pb.start();
        process.waitFor(); // Esperar a que el proceso termine
      } else if (diferencia >= 25 && diferencia <= 100) {
        for (int i = 0; i < 2; i++) {
          ProcessBuilder pb = new ProcessBuilder("java", "-cp", RUTA, "pcp.unidad1.relacion07_2.SumadorProdess",
              String.valueOf(numero1), String.valueOf(numero2));
          Process process = pb.start();
          process.waitFor(); // Esperar a que cada proceso termine
        }
      }
    } catch (IOException | InterruptedException e) {
      e.printStackTrace();
    }

    File archivo = new File("temporal.txt");
    if (archivo.exists()) {
      try (BufferedReader rd = new BufferedReader(new FileReader(archivo))) {
        String linea = rd.readLine();
        System.out.println(linea);
      } catch (IOException e) {
        e.printStackTrace();
      } finally {
        if (archivo.delete()) {
          System.out.println("Archivo temporal eliminado exitosamente.");
        } else {
          System.err.println("No se pudo eliminar el archivo temporal.");
        }
      }
    } else {
      System.err.println("El archivo temporal no existe.");
    }
  }

  public static boolean isNumero(String cadena) {
    try {
      Integer.parseInt(cadena);
      return true;
    } catch (NumberFormatException excepcion) {
      return false;
    }
  }

}
